GIT-PATCH(1)
============
:doctype: manpage
:man manual: Git Patch Manual

NAME
----
git-patch - Git equivalent of some useful stgit commands 

SYNOPSIS
--------
[verse]
*git patch* ['options'] *series* ['commit-ish']
*git patch* ['options'] *pop* commit-ish
*git patch* ['options'] *push* commit-ish
*git patch* ['options'] *float* commit-ish

OPTIONS
-------
*-v --version* ::
    Print version info

DESCRIPTION
-----------
Git-patch provides a set of commands to manipulate commits as if they were a
stack of patches, similar to stacked-git. The key difference is that git-patch
is intended to interoperate with *git*(1).

By default the patch series is the set of commits on the local branch that are
not present in the remote-tracking branch. In other words '@{u}..HEAD'. If
the current branch is not tracking any remote then the stack of patches is from
the root commit to the tip of the current branch.

Git patch doesn't prevent re-writing upstream commits, however doing so is
unwise (see RECOVERING FROM UPSTREAM REBASE in *git-rebase*(1) for more info).

When a patch is \'popped' a reference is kept (under
refs/git-patch/<branch>/<name>) the current branch is rebased to remove the
specified commit.

When a patch is \'pushed' it is cherry-picked onto tip of the current branch.
Because the commit is re-written the sha1 will change (even if the parentage of
the original commit is maintained.

COMMANDS
--------

*series* ::
    List commits on the current branch as well as those that
    have been popped.

*pop* ::
    Removes a commit from the current branch and save it for later retrieval.

*push* ::
    Re-apply a previously popped patch.

*float* ::
    Raise a commit up to the top of the current branch.

*delete* ::
    Permanently delete a popped patch

*fixup* ::
    Incorporate a change into an existing commit. If the specified commit is
    equivalent to HEAD a simple 'git commit --amend' will be done. If the
    commit is further back 'git rebase -i --autosquash' is invoked.

// EXAMPLES
// --------

AUTHORS
-------
Chris Packham

SEE ALSO
--------
*git*(1), *git-rebase*(1)
